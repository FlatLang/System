package flat/system

import flat/io
import flat/time
import flat/log

class System {
    static Logger log = Logger(System.class)

    external type FILE
    external type thing

    external int NULL

    external void exit(int code) as externalExit
    external int system(char command[])
    external FILE* getPipe(char command[], exit(Int, String, Bool))
    external bool fgets(char buffer[], int length, FILE* pipe)
    external bool feof(FILE* pipe)

    [Target c] visible static String TARGET = "C"
    [Target js] visible static String TARGET = "Javascript"
    [Target java] visible static String TARGET = "Java"

    visible static String OS

    visible static Int WINDOWS = 1
    visible static Int LINUX = 2
    visible static Int MAC_OSX = 3
    visible static Int ANDROID = 4
    visible static Int IOS = 5
    visible static Int UNKNOWN = 6

    visible static Int OS_INT

    [Target c]
    compiler_visible thread_local external_name static ExceptionData exceptionData

    static {
        external c {
            #ifdef _WIN32
                #{OS = "Windows"};
                #{OS_INT = WINDOWS};
            #elif defined(__linux__)
                #{OS = "Linux"};
                #{OS_INT = LINUX};
            #elif defined(__APPLE__)
                #{OS = "Mac OS X"};
                #{OS_INT = MAC_OSX};
            #endif
        }
        external js {
            if (typeof process !== 'undefined') {
                switch (process.platform) {
                    case "win32": {
                        #{OS = "Windows"};
                        #{OS_INT = WINDOWS};
                        break;
                    }
                    case "linux": {
                        #{OS = "Linux"};
                        #{OS_INT = LINUX};
                        break;
                    }
                    case "darwin": {
                        #{OS = "Mac OS X"};
                        #{OS_INT = MAC_OSX};
                        break;
                    }
                    default: {
                        #{OS = "Unknown"};
                        #{OS_INT = UNKNOWN};
                    }
                }
            } else if (typeof navigator !== 'undefined') {
                if (navigator.userAgent.indexOf("Win") !== -1) {
                    #{OS = "Windows"};
                    #{OS_INT = WINDOWS};
                } else if (navigator.userAgent.indexOf("Mac") !== -1) {
                    #{OS = "Mac OS X"};
                    #{OS_INT = MAC_OSX};
                } else if (navigator.userAgent.indexOf("Linux") !== -1) {
                    #{OS = "Linux"};
                    #{OS_INT = LINUX};
                } else if (navigator.userAgent.indexOf("Android") !== -1) {
                    #{OS = "Android"};
                    #{OS_INT = ANDROID};
                } else if (navigator.userAgent.indexOf("like Mac") !== -1) {
                    #{OS = "iOS"};
                    #{OS_INT = IOS};
                } else {
                    #{OS = "Unknown"};
                    #{OS_INT = UNKNOWN};
                }
            }
        }
    }

    visible static CumulativeTimer overheadTimer = CumulativeTimer()

    [Target c]
    public static exit(Int code) {
        externalExit(code)
    }

    [Target java]
    public static exit(Int code) {
        external {
            java.lang.System.exit(#{code});
        }
    }

    [Target js]
    public static exit(Int code) {
        external {
            process.exit(#{code});
        }
    }

    public static exit(Int code, String message, Bool log = false) {
        if (log) {
            let file = File("Log" + Time.currentTimeMillis + ".txt")
            let f = FileWriter(file)

            f.writeLine(message)
        }

        Console.writeLine(message)

        exit(code)
    }

    [Target c]
    public static execute(String command) -> Process {
        FILE* pipe = getPipe(command.chars.data, exit)

        if (pipe == 0) {
            exit(1, "Unable to open pipe")
        }

        return Process(FileReader(pipe))
    }

    [Target c]
    public static execute(String[] arguments) =>
        execute(arguments.map(arg => {
            arg.contains(/[ &]/) ? "\"#arg\"" : arg
        }).join(" "))

    compiler_visible static runMain(Int argc, native_array native Char[][] argvs, mainFunc(Array<String>), initialize() = {}, callStaticBlocks() = {}) -> Int => 0 {
        external c {
            #ifdef _WIN32
                setProgramName(#{argvs[0]});
                //signal(SIGSEGV, nova_signal_handler);
                SetUnhandledExceptionFilter(nova_exception_handler);
            #endif

            srand(currentTimeMillis());
        }

        external c {
            nova_garbageData = NOVA_MALLOC(sizeof(void*));
            nova_null = #{Null()};

            if ((errno = nova_create_semaphore()) != 0) return errno;
        }

        var String[] args

        initialize()

        try {
            callStaticBlocks()

            args = new String[argc]

            for (i in 0..argc) {
                var native_array native Char[] allocated

                external c {
                    #{allocated} = (char*)NOVA_MALLOC(sizeof(char) * strlen(#{argvs[i]}) + 1);
                    copy_string(#{allocated}, #{argvs[i]});
                }

                args[i] = String(allocated)
            }

            mainFunc(args)
        } catch (Exception e) {
            var message = "#e.class.location in main Thread"

            if (e.message) {
                message += ": #e.message"
            }

            Console.log(message)
        }

        // Thread.ACTIVE_THREADS.forEach({ _.join() })

        external c {
            if ((errno = nova_close_semaphore()) != 0) return errno;
        }

        external c {
            #ifdef _WIN32
                FreeConsole();
            #endif

            NOVA_FREE((void*)#{args});
        }
    }

    [Target js]
    public static jsCreateInstance<T>(String className, Int overloadId = -1) -> T {
        var T instance = null

        var String constructorName = "new#className"

        if (overloadId >= 0) {
            constructorName += overloadId
        }

        external {
            #{instance} = novaConstructors[#{constructorName.chars.data}]();
        }

        return instance
    }
}
